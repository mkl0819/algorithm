package com.ssafy.mo;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
 * 핀볼게임
 * -> 블랙홀 : -1
 * -> 빈공간 : 0
 * -> 벽 : 1~5
 * -> 웜홀 : 6~10
 */
public class Solution_mo_5650 {
	static final int TOPRIGHT = 1, DOWNRIGHT = 2, DOWNLEFT = 3, TOPLEFT = 4, ALL = 5;
	static final int[] blockD = { 0, 9, 3, 6, 12, 15 };
	static int T, N, map[][], score[][];
	static boolean visited[][][];
	static int BLACKHOLE, WORMHOLES[][];
	static int dir[][] = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 } };
	static int MAX;

	static StringTokenizer st;

	public static void main(String[] args) throws Exception {
		System.setIn(new FileInputStream("res/Solution_mo_5650.txt"));
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

		T = Integer.parseInt(in.readLine().trim());
		T = 1;
		for (int test_case = 1; test_case <= T; test_case++) {
			N = Integer.parseInt(in.readLine().trim());

			map = new int[N][N];
			score = new int[N][N];
			WORMHOLES = new int[5][2];
			visited = new boolean[N][N][4];

			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(in.readLine());
				for (int j = 0; j < N; j++) {
					switch (map[i][j] = Integer.parseInt(st.nextToken())) {
					case -1:
						BLACKHOLE = i * 1000 + j;
						break;
					case 0:
						break;
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
						break;
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
						if (WORMHOLES[map[i][j] - 6][0] == 0) {
							WORMHOLES[map[i][j] - 6][0] = i * 1000 + j;
						} else {
							WORMHOLES[map[i][j] - 6][1] = i * 1000 + j;
						}
						break;
					}
				}
			}
			print();
			MAX = 0;
			search();
		}
	}

	private static void search() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				switch (map[i][j]) {
				case -1:
					BLACKHOLE = i * 1000 + j;
					break;
				case 0:
					break;
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
					go(i, j, blockD[map[i][j]]);
					break;
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
					if (WORMHOLES[map[i][j] - 6][0] == 0) {
						WORMHOLES[map[i][j] - 6][0] = i * 1000 + j;
					} else {
						WORMHOLES[map[i][j] - 6][1] = i * 1000 + j;
					}
					break;
				}
			}
		}
	}

	private static void go(int r, int c, int block) {
		System.out.println(r + "," + c);
		int dr, dc, sc;
		for (int d = 0; d < 4; d++) {
			dr = r;
			dc = c;
			if (!visited[r][c][d]) {
				if (((1 << d) & block) > 0) {
					System.out.println(d + "dir");
					visited[r][c][d] = true;
					while (true) {
						dr += dir[d][0];
						dc += dir[d][1];
						if (check(dr, dc)) {

							if (map[dr][dc] == 0) {
								sc = (score[dr][dc]++) + 1;
								if (MAX < sc) {
									MAX = sc;
								}
							}
						}
					}
				}
			}
		}
	}

	private static void print() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				System.out.printf("%2d ", map[i][j]);
			}
			System.out.println();
		}
		System.out.println();
		System.out.println("B : " + BLACKHOLE / 1000 + ", " + BLACKHOLE % 1000);
		for (int i = 0; i < 5; i++) {
			System.out.println("W : " + WORMHOLES[i][0] / 1000 + ", " + WORMHOLES[i][0] % 100 + " || "
					+ WORMHOLES[i][1] / 1000 + ", " + WORMHOLES[i][1] % 100);
		}
	}

	private static boolean check(int r, int c) {
		if (r < 0 || c < 0)
			return false;
		if (r >= N || c >= N)
			return false;
		return true;
	}
}
